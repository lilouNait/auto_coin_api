{
  "swagger": "2.0",
  "info": {
    "description": "A swagger definition of the GarageCorner Project API",
    "version": "1.0.0",
    "title": "GarageCornerAPI",
    "contact": {},
    "license": {
      "url": "http://unlicense.org"
    }
  },
  "host": "localhost",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "garages-api-controller",
      "description": "the garages API"
    },
    {
      "name": "login-api-controller",
      "description": "the login API"
    },
    {
      "name": "users-api-controller",
      "description": "the users API"
    }
  ],
  "paths": {
    "/garages": {
      "get": {
        "tags": [
          "Garage"
        ],
        "summary": "Get all garages.",
        "operationId": "getGarage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Search by address.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search by name.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "partner",
            "in": "query",
            "description": "Search by partner.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Garage response",
            "schema": {
              "$ref": "#/definitions/InlineResponse200"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Garage"
        ],
        "summary": "Create a new Garage.",
        "operationId": "createGarage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Garage to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Garage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Garage"
            }
          },
          "201": {
            "description": "Create garage response",
            "schema": {
              "$ref": "#/definitions/Garage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/garages/{id}": {
      "get": {
        "tags": [
          "Garage"
        ],
        "summary": "Get a Garage",
        "operationId": "getGarageById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique garage identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Garage response",
            "schema": {
              "$ref": "#/definitions/InlineResponse2001"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Garage"
        ],
        "summary": "Update a garage.",
        "operationId": "updateGarageById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Garage data to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Garage"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique garage identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Update garage response",
            "schema": {
              "$ref": "#/definitions/Garage"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Garage"
        ],
        "summary": "Delete a garage.",
        "operationId": "deleteGarageById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique garage identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete garage response"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Log user",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User to connect.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login response"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users.",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Search by email.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search by name.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search by status.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "username",
            "in": "query",
            "description": "Search by username.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/InlineResponse2002"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User.",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "Create garage response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a User",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique user identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/InlineResponse2003"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user.",
        "operationId": "updateUserById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique user identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Update user response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user.",
        "operationId": "deleteUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique user identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete user response"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Address"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "note": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Comment"
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "Error"
    },
    "Garage": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "id_partner": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "partner": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      },
      "title": "Garage"
    },
    "InlineResponse200": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Garage"
          }
        }
      },
      "title": "InlineResponse200"
    },
    "InlineResponse2001": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Garage"
        }
      },
      "title": "InlineResponse2001"
    },
    "InlineResponse2002": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "title": "InlineResponse2002"
    },
    "InlineResponse2003": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/User"
        }
      },
      "title": "InlineResponse2003"
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "client",
            "partner"
          ]
        },
        "username": {
          "type": "string"
        }
      },
      "title": "User"
    }
  }
}