swagger: '2.0'
info:
  title: AutoCoinAPI
  description: A swagger definition of the AutoCoin Project API
  version: "1.0.0"
schemes:
  - https
  - http
basePath: /api/v1
produces:
  - application/json


paths:
  /login:
    post:
      operationId: login
      summary: Log user
      parameters:
        - name: body
          in: body
          required: true
          description: User to connect.
          schema:
            $ref: '#/definitions/User'
      tags:
        - Login
      responses:
        200:
          description: Login response

  /garages:
    get:
      operationId: getGarage
      summary: Get all garages.
      parameters:
        - name: Search by name
          in: query
          description: Search by name.
          required: false
          type: string
        - name: partner
          in: query
          description: Search by partner.
          required: false
          type: string
        - name: address
          in: query
          description: Search by address.
          required: false
          type: string
        - name: coordinates
          in: query
          description: Search by coordinates.
          required: false
          type: string
      tags:
        - Garage
      responses:
        200:
          description: Garage response
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Garage'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    post:
      operationId: createGarage
      summary: Create a new Garage.
      parameters:
        - name: body
          in: body
          required: true
          description: Garage to be created.
          schema:
            $ref: '#/definitions/Garage'
      tags:
        - Garage
      responses:
        201:
          description: Create garage response
          schema:
            $ref: '#/definitions/Garage'

  /garages/{id}:
    get:
      operationId: getGarageById
      summary: Get a Garage
      parameters:
        - name: id
          in: path
          required: true
          description: Unique garage identifier.
          type: integer
      tags:
        - Garage
      responses:
        200:
          description: Garage response
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Garage'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    put:
      operationId: updateGarageById
      summary: Update a garage.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique garage identifier.
          type: integer
        - name: body
          in: body
          required: true
          description: Garage data to be updated
          schema:
            $ref: '#/definitions/Garage'
      tags:
        - Garage
      responses:
        200:
          description: Update garage response
          schema:
            $ref: '#/definitions/Garage'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    delete:
      operationId: deleteGarageById
      summary: Delete a garage.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique garage identifier.
          type: integer
      tags:
        - Garage
      responses:
        200:
          description: Delete garage response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /users:
    get:
      operationId: getUser
      summary: Get all users.
      parameters:
        - name: Search by name
          in: query
          description: Search by name.
          required: false
          type: string
        - name: username
          in: query
          description: Search by username.
          required: false
          type: string
        - name: email
          in: query
          description: Search by email.
          required: false
          type: string
        - name: status
          in: query
          description: Search by status.
          required: false
          type: string
      tags:
        - User
      responses:
        200:
          description: User response
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    post:
      operationId: createUser
      summary: Create a new User.
      parameters:
        - name: body
          in: body
          required: true
          description: User to be created.
          schema:
            $ref: '#/definitions/User'
      tags:
        - User
      responses:
        201:
          description: Create garage response
          schema:
            $ref: '#/definitions/User'

        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /users/{id}:
    get:
      operationId: getUserById
      summary: Get a User
      parameters:
        - name: id
          in: path
          required: true
          description: Unique user identifier.
          type: integer
      tags:
        - User
      responses:
        200:
          description: User response
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    put:
      operationId: updateUserById
      summary: Update a user.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique user identifier.
          type: integer
        - name: body
          in: body
          required: true
          description: User data to be updated
          schema:
            $ref: '#/definitions/User'
      tags:
        - User
      responses:
        200:
          description: Update user response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    delete:
      operationId: deleteUserById
      summary: Delete a user.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique user identifier.
          type: integer
      tags:
        - User
      responses:
        200:
          description: Delete user response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'





definitions:
  Comment:
    type: object
    properties:
      id:
        type: integer
      client_id:
        type: integer
      comment:
        type: string
      note:
        type: integer

  Address:
    type: object
    properties:
      id:
        type: integer
      country:
        type: string
      city:
        type: string
      address:
        type: string

  Garage:
    type: object
    properties:
      id:
        type: integer
      id_partner:
        type: integer
      partner:
        type: string
      name:
        type: string
      phone:
        type: string
      description:
        type: string
      address:
        $ref: '#/definitions/Address'
      coordinates:
        type: array
        items:
          type: string
        minItems: 2
        maxItems: 2
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'

  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      name:
        type: string
      first_name:
        type: string
      phone:
        type: string
      email:
        type: string
      password:
        type: string
      status:
        type: string
        enum:
          - client
          - partner

  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
      fields:
        type: string